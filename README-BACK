
 Last modified: 17 Nov 2020 (week 7)
 please read and add to the document as you wish
 scan through the skeleton code and check for TODO
 current TODO:
    /controllers/services/user.service.js => function registerUser(...) {}

 * Backend follows MVC architectural style with the following structure
    application
        Controller
        Model
            Entities (Mongo Objects/Schema)
            Mappers (omit for now..)
            Services (actual implementation of CRUD, validation, etc)
        View
            a simple display for the things we send to frontend
            this is not implemented yet, (feel free to do it)

 * for mongodb, we use the following features in mongoose:
        Schemas & Models
        Documents
        Queries & Validation (Validation !!!)
        Populate
        Discriminators
        https://mongoosejs.com/docs/guides.html

  * below is a simple guide for pattern of communication with db
        server.js:
            app.use('/users',require('./controllers/users.controller');
            app.get('/', function (req, res) {
                return res.redirect('/default-page');
            });

        users.controller.js:
            var userService = require('services/user.service')
            router.post('/authenticate', authenticateUser)
            router.post('/register', registerUser)

            function authenticateUser(req, res) {
                userService.authenticateUser(req.body).then(function (token) {
                    //postprocessing...
                    res.send(some_result, status = 200);
                }
            }

        users.service.js:
            const mongo = mongoose.connect(xxxxx);
            function authenticate(username, password) {
                mongo.users.findOne()
                //omit details...
            }

        when a http request is sent, server directs it into one of the corresponding
        controller classes. The controller then set up a callback function and send the
        req.body as input into service layer, which then communicates with the database

    * some notes about git and project management
        work on only one service/controller at a time
        do not push if it is not a finished product
        always git pull before working, let your teammate know if you just pushed
        normally a merge request will be approved only if:
            1. both the service and the controller for a given class is implemented
            2. fixing bugs

    * some notes on testing for CRUD or anything related to mongodb
        1. general idea is to set up unit test for each microservice
        2. there are different technologies for testing:
            -> Jest
            -> Mocha
            -> Postman (the one I'm using, less popular but has a desktop app)
        3. make sure to monitor MongoDB Compass closely
            our official db is named as 'Bruin-FitnessPal'
                currently have /Bruin-FitnessPal/users

            delete all test inputs if still in the database, or
            use 'local' or create a new db named 'test' for testing

    *
